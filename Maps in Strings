// Accessing elements in the string with map


******Using Iterators:*****

#include <iostream>
#include <map>

using namespace std;

int main() {
    map<string, int> myMap;
    myMap["one"] = 1;
    myMap["two"] = 2;
    myMap["three"] = 3;

    // Accessing elements using iterators
    for (auto it = myMap.begin(); it != myMap.end(); ++it) {
        cout << "Key: " << it->first << ", Value: " << it->second << endl;
    }

    return 0;
}



Explanation:

#include <iostream> and #include <map>: These lines include necessary header files for input and output operations (iostream) and for using the map container from the Standard Library (map).

using namespace std;: This line allows you to use components from the Standard Library (such as map and cout) without prefixing them with std::.

map<string, int> myMap;: This line declares a map named myMap where the keys are of type string and the values are of type int.

myMap["one"] = 1;, myMap["two"] = 2;, myMap["three"] = 3;: These lines insert key-value pairs into the myMap map. The keys are strings ("one", "two", "three"), and the corresponding values are integers (1, 2, 3).

for (auto it = myMap.begin(); it != myMap.end(); ++it) { ... }: This is a loop that iterates through the myMap map using iterators. it is an iterator pointing to pairs of keys and values in the map.

cout << "Key: " << it->first << ", Value: " << it->second << endl;: Inside the loop, this line prints the key and corresponding value of each element in the map. it->first accesses the key, and it->second accesses the value.

return 0;: The program ends and returns 0 to the operating system, indicating successful execution.

Output:
Key: one, Value: 1
Key: three, Value: 3
Key: two, Value: 2






******Using Subscript Operator ([])*********

#include <iostream>
#include <map>

int main() {
    std::map<std::string, int> myMap;
    myMap["one"] = 1;
    myMap["two"] = 2;
    myMap["three"] = 3;

    // Accessing elements using the subscript operator
    std::cout << "Value corresponding to key 'two': " << myMap["two"] << std::endl;

    return 0;
}


NOTE:  
Remember that if you try to access a key that doesn't exist using the subscript operator, it will create a new element with that key and a default-initialized value. To avoid this, you can use the find function to check if a key exists before accessing it:

std::map<std::string, int> myMap;
auto it = myMap.find("key");

if (it != myMap.end()) {
    // Key found, access the value using it->second
    std::cout << "Value: " << it->second << std::endl;
} else {
    // Key not found
    std::cout << "Key not found in the map." << std::endl;
}






//different types of maps in c++

In C++, the Standard Library provides several types of map-like associative containers. Each of these containers offers different features and performance characteristics to suit specific use cases. Here are some of the most commonly used map-like containers in C++:

1. std::map:

Implemented as a balanced binary search tree.
Provides key-value pairs sorted by keys in ascending order.
Insertion, deletion, and search operations have a time complexity of O(log n).
Suitable for general-purpose use when the order of keys matters.

code:
#include <map>
std::map<KeyType, ValueType> myMap;




2. std::unordered_map:

Implemented as a hash table.
Provides key-value pairs without any specific order.
Insertion, deletion, and search operations have an average time complexity of O(1).
Suitable for general-purpose use when the order of keys doesn't matter, and fast lookups are required.

code:
#include <unordered_map>
std::unordered_map<KeyType, ValueType> myMap;



3.  std::multimap:

Implemented as a balanced binary search tree.
Allows multiple elements with the same key.
Provides key-value pairs sorted by keys in ascending order.
Insertion, deletion, and search operations have a time complexity of O(log n).
Suitable when you need to store multiple elements with the same key.


code:
#include <map>
std::multimap<std::string, int> myMultiMap;
myMultiMap.insert({"one", 1});
myMultiMap.insert({"two", 2});
myMultiMap.insert({"one", 3}); // Allows duplicate keys




4. std::unordered_multimap:
Implemented as a hash table.
Allows multiple elements with the same key.
Provides key-value pairs without any specific order.
Insertion, deletion, and search operations have an average time complexity of O(1).
Suitable when you need to store multiple elements with the same key and fast lookups are required.

code:

#include <unordered_map>
std::unordered_multimap<std::string, int> myUnorderedMultiMap;
myUnorderedMultiMap.insert({"one", 1});
myUnorderedMultiMap.insert({"two", 2});
myUnorderedMultiMap.insert({"one", 3}); // Allows duplicate keys



5. std::set:
Implemented as a balanced binary search tree.
Stores unique keys in sorted order.
Insertion, deletion, and search operations have a time complexity of O(log n).
Suitable when you only need to store keys without associated values.


code:
#include <set>
std::set<std::string> mySet;
mySet.insert("one");
mySet.insert("two");
mySet.insert("three");


6. std::unordered_set:
Implemented as a hash table.
Stores unique keys without any specific order.
Insertion, deletion, and search operations have an average time complexity of O(1).
Suitable when you only need to store keys without associated values and fast lookups are required.


code:
#include <unordered_set>
std::unordered_set<std::string> myUnorderedSet;
myUnorderedSet.insert("one");
myUnorderedSet.insert("two");
myUnorderedSet.insert("three");
